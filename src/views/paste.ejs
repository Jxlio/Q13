<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Q13 - Visualisation</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>ðŸ”’</text></svg>">
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        :root {
            --bg-color: #1a1a1a;
            --bg-color: #0a0a0a;
            --nav-bg: #000000;
            --content-bg: #151515;
            --input-bg: #1a1a1a;
            --text-color: #e0e0e0;
            --text-muted: #888888;
            --border-color: #2a2a2a;
            --accent-color: #4a9eff;
            --error-bg: #2d1215;
            --error-border: #4d1f24;
            --error-text: #ff4a4a;
            --success-color: #00c853;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            width: 100%;
            box-sizing: border-box;
            flex: 1;
        }

        .navbar-container {
            padding: 20px 0;
            margin-bottom: 20px;
        }

        .navbar {
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 12px 16px;
            margin-bottom: 32px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .navbar-brand {
            color: var(--text-color);
            font-size: 18px;
            font-weight: 500;
            text-decoration: none;
        }

        .navbar-button {
            background: var(--text-color);
            color: var(--nav-bg);
            padding: 8px 16px;
            border-radius: 6px;
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
            transition: opacity 0.2s;
        }

        .navbar-button:hover {
            opacity: 0.9;
        }

        .error {
            color: #ff4444;
            text-align: center;
            padding: 20px;
            display: none;
        }

        .content-grid {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 20px;
            margin-bottom: 20px;
            align-items: stretch;
        }

        .content-box {
            background: var(--content-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 20px;
            overflow: hidden;
        }

        .random-art {
            background: var(--nav-bg);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 20px;
            white-space: pre;
            font-family: monospace;
            overflow-x: auto;
        }

        .content {
            background: var(--content-bg);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 20px;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: monospace;
            overflow-y: auto;
        }

        .content-container {
            background-color: var(--content-bg);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            border: 1px solid var(--border-color);
        }

        .info {
            background: var(--content-bg);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 16px;
            margin-bottom: 20px;
        }

        .visitors {
            background: var(--content-bg);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 16px;
        }

        .info-container {
            background: var(--content-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            overflow: hidden;
        }

        .info-header {
            padding: 12px 16px;
            font-size: 14px;
            font-weight: 500;
            border-bottom: 1px solid var(--border-color);
            color: var(--text-color);
        }

        .info {
            padding: 16px;
            color: var(--text-muted);
            font-size: 14px;
        }

        .visitor-item {
            padding: 8px 0;
            border-bottom: 1px solid var(--border-color);
        }

        .visitor-item:last-child {
            border-bottom: none;
        }

        .badge {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            background: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            margin-left: 8px;
        }

        .hidden {
            display: none !important;
        }

        @media (max-width: 768px) {
            .content-grid {
                grid-template-columns: 1fr;
            }
        }

        footer {
            background: var(--nav-bg);
            border-top: 1px solid var(--border-color);
            padding: 20px 0;
            margin-top: auto;
        }

        .footer-content {
            display: flex;
            justify-content: center;
            gap: 24px;
        }

        .footer-link {
            color: var(--text-muted);
            text-decoration: none;
            font-size: 14px;
            transition: color 0.2s;
        }

        .footer-link:hover {
            color: var(--text-color);
        }

        /* Styles pour le contenu Markdown */
        .content[data-markdown="true"] {
            white-space: normal;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            line-height: 1.6;
        }

        .content[data-markdown="true"] h1,
        .content[data-markdown="true"] h2,
        .content[data-markdown="true"] h3,
        .content[data-markdown="true"] h4,
        .content[data-markdown="true"] h5,
        .content[data-markdown="true"] h6 {
            margin-top: 1.5em;
            margin-bottom: 0.5em;
            color: var(--text-color);
            font-weight: 600;
            line-height: 1.25;
        }

        .content[data-markdown="true"] h1 { font-size: 2em; border-bottom: 1px solid var(--border-color); padding-bottom: 0.3em; }
        .content[data-markdown="true"] h2 { font-size: 1.75em; border-bottom: 1px solid var(--border-color); padding-bottom: 0.3em; }
        .content[data-markdown="true"] h3 { font-size: 1.5em; }
        .content[data-markdown="true"] h4 { font-size: 1.25em; }
        .content[data-markdown="true"] h5 { font-size: 1.1em; }
        .content[data-markdown="true"] h6 { font-size: 1em; }

        .content[data-markdown="true"] p {
            margin: 1em 0;
            line-height: 1.6;
        }

        .content[data-markdown="true"] a {
            color: var(--accent-color);
            text-decoration: none;
            transition: color 0.2s;
        }

        .content[data-markdown="true"] a:hover {
            text-decoration: underline;
            color: var(--primary-color);
        }

        .content[data-markdown="true"] code {
            background: var(--inline-code-bg);
            padding: 0.2em 0.4em;
            border-radius: 3px;
            font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
            font-size: 0.9em;
        }

        .content[data-markdown="true"] pre {
            background: var(--code-bg);
            padding: 1em;
            border-radius: 6px;
            overflow-x: auto;
            margin: 1em 0;
            border: 1px solid var(--border-color);
        }

        .content[data-markdown="true"] pre code {
            background: none;
            padding: 0;
            border-radius: 0;
            font-size: 0.9em;
            color: #e6e6e6;
        }

        .content[data-markdown="true"] blockquote {
            margin: 1em 0;
            padding: 0.5em 1em;
            color: var(--text-muted);
            border-left: 4px solid var(--accent-color);
            background: var(--input-bg);
            border-radius: 0 4px 4px 0;
        }

        .content[data-markdown="true"] ul,
        .content[data-markdown="true"] ol {
            margin: 1em 0;
            padding-left: 2em;
        }

        .content[data-markdown="true"] li {
            margin: 0.5em 0;
        }

        .content[data-markdown="true"] table {
            border-collapse: collapse;
            width: 100%;
            margin: 1em 0;
            display: block;
            overflow-x: auto;
        }

        .content[data-markdown="true"] th,
        .content[data-markdown="true"] td {
            border: 1px solid var(--border-color);
            padding: 0.6em 1em;
        }

        .content[data-markdown="true"] th {
            background: var(--input-bg);
            font-weight: 600;
        }

        .content[data-markdown="true"] tr:nth-child(2n) {
            background: var(--input-bg);
        }

        .content[data-markdown="true"] img {
            max-width: 100%;
            height: auto;
            border-radius: 4px;
            margin: 1em 0;
        }

        .content[data-markdown="true"] hr {
            height: 1px;
            border: none;
            background: var(--border-color);
            margin: 2em 0;
        }

        .content[data-markdown="true"] strong {
            font-weight: 600;
            color: var(--text-color);
        }

        .content[data-markdown="true"] em {
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="container">
        <nav class="navbar">
            <a href="/" class="navbar-brand">Q13</a>
            <a href="/" class="navbar-button">Nouveau</a>
        </nav>

        <div id="error" class="error"></div>
        <div class="content-grid">
            <div class="content-box">
                <div id="randomArt" class="random-art"></div>
            </div>
            <div class="content-box">
                <div id="content" class="content"></div>
            </div>
        </div>
        <div id="info" class="info"></div>
        <div id="visitors" class="visitors"></div>
    </div>

    <footer>
        <div class="container">
            <div class="footer-content">
                <a href="/about" class="footer-link">Ã€ propos</a>
                <a href="/legal" class="footer-link">Mentions lÃ©gales</a>
                <a href="/privacy" class="footer-link">Politique de confidentialitÃ©</a>
            </div>
        </div>
    </footer>

    <script src="/js/kyber.js"></script>
    <script>
        const pasteId = window.location.pathname.split('/').pop();
        const key = window.location.hash.slice(1);

        // Fonction pour convertir Base64URL en Uint8Array
        function base64UrlToUint8Array(base64Url) {
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const binary = atob(base64);
            return new Uint8Array(binary.split('').map(char => char.charCodeAt(0)));
        }

        // Fonction pour dÃ©chiffrer avec Kyber et AES-GCM
        async function decryptContent(encryptedContent, iv, kyberCiphertext, sharedSecret) {
            try {
                if (!encryptedContent || !iv || !kyberCiphertext || !sharedSecret) {
                    throw new Error('DonnÃ©es manquantes pour le dÃ©chiffrement');
                }

                // Convertir les donnÃ©es en Uint8Array
                const encryptedBuffer = base64UrlToUint8Array(encryptedContent);
                const ivBuffer = base64UrlToUint8Array(iv);
                const kyberCiphertextBuffer = base64UrlToUint8Array(kyberCiphertext);
                const sharedSecretBuffer = base64UrlToUint8Array(sharedSecret);

                // DÃ©chiffrer la clÃ© AES avec Kyber
                const aesKeyBuffer = await kyber.Decrypt768(kyberCiphertextBuffer, sharedSecretBuffer);

                // Importer la clÃ© AES
                const aesKey = await crypto.subtle.importKey(
                    "raw",
                    aesKeyBuffer,
                    { name: "AES-GCM" },
                    false,
                    ["decrypt"]
                );

                // DÃ©chiffrer le contenu avec AES-GCM
                const decryptedBuffer = await crypto.subtle.decrypt(
                    {
                        name: "AES-GCM",
                        iv: ivBuffer
                    },
                    aesKey,
                    encryptedBuffer
                );

                return new TextDecoder().decode(decryptedBuffer);
            } catch (error) {
                console.error('Erreur dÃ©taillÃ©e:', error);
                throw new Error(`Erreur de dÃ©chiffrement: ${error.message}`);
            }
        }

        async function loadPaste(success = false) {
            try {
                console.log('Chargement du paste:', { pasteId, key: key ? 'prÃ©sent' : 'manquant' });
                
                const response = await fetch(`/api/paste/${pasteId}${success ? '?success=true' : ''}`);
                if (!response.ok) {
                    throw new Error('Paste non trouvÃ©');
                }

                const data = await response.json();
                console.log('DonnÃ©es du serveur reÃ§ues:', {
                    hasContent: !!data.content,
                    hasIv: !!data.iv,
                    hasKyberCiphertext: !!data.kyberCiphertext,
                    randomArt: !!data.randomArt,
                    visitors: data.visitors?.length,
                    enableMarkdown: data.enableMarkdown
                });
                
                if (!key) {
                    throw new Error('Ce paste nÃ©cessite une clÃ© de dÃ©chiffrement. Veuillez utiliser le lien complet qui vous a Ã©tÃ© fourni.');
                }

                try {
                    const decryptedContent = await decryptContent(
                        data.content,
                        data.iv,
                        data.kyberCiphertext,
                        key
                    );
                    
                    const contentElement = document.getElementById('content');
                    
                    // Traiter le contenu en fonction du type (Markdown ou texte brut)
                    if (data.enableMarkdown) {
                        contentElement.setAttribute('data-markdown', 'true');
                        contentElement.innerHTML = marked.parse(decryptedContent);
                    } else {
                        contentElement.removeAttribute('data-markdown');
                        contentElement.textContent = decryptedContent;
                    }

                    if (!success) {
                        await loadPaste(true);
                    }
                } catch (decryptError) {
                    showError(decryptError.message);
                    return;
                }

                document.getElementById('randomArt').textContent = data.randomArt;
                
                const infoItems = [];
                if (data.remainingViews !== undefined) {
                    infoItems.push(`Vues restantes <span class="badge">${data.remainingViews}</span>`);
                }
                if (data.expiresAt) {
                    const expireDate = new Date(data.expiresAt);
                    const timeLeft = expireDate - new Date();
                    const hoursLeft = Math.ceil(timeLeft / (1000 * 60 * 60));
                    
                    if (hoursLeft < 24) {
                        infoItems.push(`Expire dans <span class="badge">${hoursLeft}h</span>`);
                    } else {
                        infoItems.push(`Expire le <span class="badge">${expireDate.toLocaleDateString()}</span>`);
                    }
                }
                document.getElementById('info').innerHTML = infoItems.join('<br>');

                const visitorsHtml = data.visitors.map(v => 
                    `<div class="visitor-item">${v.ip} - ${new Date(v.timestamp).toLocaleString()}</div>`
                ).join('');
                document.getElementById('visitors').innerHTML = visitorsHtml || 'Aucun visiteur';

            } catch (error) {
                showError(error.message);
            }
        }

        function showError(message) {
            const errorElement = document.getElementById('error');
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        loadPaste();
    </script>
</body>
</html> 