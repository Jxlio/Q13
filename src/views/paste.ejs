<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Secure Paste - Visualisation</title>
    <style>
        :root {
            --bg-color: #0a0a0a;
            --nav-bg: #000000;
            --content-bg: #151515;
            --input-bg: #1a1a1a;
            --text-color: #e0e0e0;
            --text-muted: #888888;
            --border-color: #2a2a2a;
            --accent-color: #4a9eff;
            --error-bg: #2d1215;
            --error-border: #4d1f24;
            --error-text: #ff4a4a;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            width: 100%;
            box-sizing: border-box;
            flex: 1;
        }

        .navbar-container {
            padding: 20px 0;
            margin-bottom: 20px;
        }

        .navbar {
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 12px 16px;
            margin-bottom: 32px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .navbar-brand {
            color: var(--text-color);
            font-size: 18px;
            font-weight: 500;
            text-decoration: none;
        }

        .navbar-button {
            background: var(--text-color);
            color: var(--nav-bg);
            padding: 8px 16px;
            border-radius: 6px;
            text-decoration: none;
            font-size: 14px;
            font-weight: 500;
            transition: opacity 0.2s;
        }

        .navbar-button:hover {
            opacity: 0.9;
        }

        .error {
            color: #ff4444;
            text-align: center;
            padding: 20px;
            display: none;
        }

        .content-grid {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 20px;
            margin-bottom: 20px;
            align-items: stretch;
        }

        .content-box {
            background: var(--content-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 20px;
            overflow: hidden;
        }

        .random-art {
            background: var(--nav-bg);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 20px;
            white-space: pre;
            font-family: monospace;
            overflow-x: auto;
        }

        .content {
            background: var(--content-bg);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 20px;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-family: monospace;
            overflow-y: auto;
        }

        .content-container {
            background-color: var(--content-bg);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            border: 1px solid var(--border-color);
        }

        .info {
            background: var(--content-bg);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 16px;
            margin-bottom: 20px;
        }

        .visitors {
            background: var(--content-bg);
            border: 1px solid var(--border-color);
            border-radius: 4px;
            padding: 16px;
        }

        .info-container {
            background: var(--content-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            overflow: hidden;
        }

        .info-header {
            padding: 12px 16px;
            font-size: 14px;
            font-weight: 500;
            border-bottom: 1px solid var(--border-color);
            color: var(--text-color);
        }

        .info {
            padding: 16px;
            color: var(--text-muted);
            font-size: 14px;
        }

        .visitor-item {
            padding: 8px 0;
            border-bottom: 1px solid var(--border-color);
        }

        .visitor-item:last-child {
            border-bottom: none;
        }

        .badge {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            background: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            margin-left: 8px;
        }

        .hidden {
            display: none !important;
        }

        @media (max-width: 768px) {
            .content-grid {
                grid-template-columns: 1fr;
            }
        }

        footer {
            background: var(--nav-bg);
            border-top: 1px solid var(--border-color);
            padding: 20px 0;
            margin-top: auto;
        }

        .footer-content {
            display: flex;
            justify-content: center;
            gap: 24px;
        }

        .footer-link {
            color: var(--text-muted);
            text-decoration: none;
            font-size: 14px;
            transition: color 0.2s;
        }

        .footer-link:hover {
            color: var(--text-color);
        }
    </style>
</head>
<body>
    <div class="container">
        <nav class="navbar">
            <a href="/" class="navbar-brand">Secure Paste</a>
            <a href="/" class="navbar-button">Nouveau</a>
        </nav>

        <div id="error" class="error"></div>
        <div class="content-grid">
            <div class="content-box">
                <div id="randomArt" class="random-art"></div>
            </div>
            <div class="content-box">
                <div id="content" class="content"></div>
            </div>
        </div>
        <div id="info" class="info"></div>
        <div id="visitors" class="visitors"></div>
    </div>

    <footer>
        <div class="container">
            <div class="footer-content">
                <a href="/about" class="footer-link">À propos</a>
                <a href="/legal" class="footer-link">Mentions légales</a>
                <a href="/privacy" class="footer-link">Politique de confidentialité</a>
            </div>
        </div>
    </footer>

    <script>
        const pasteId = window.location.pathname.split('/').pop();
        const key = window.location.hash.slice(1);

        async function decryptContent(encryptedContent, iv, key) {
            try {
                console.log('Données reçues:', {
                    encryptedContent: encryptedContent ? 'présent' : 'manquant',
                    iv: iv ? 'présent' : 'manquant',
                    key: key ? 'présent' : 'manquant'
                });

                if (!encryptedContent || !iv || !key) {
                    throw new Error('Données manquantes pour le déchiffrement: ' + 
                        (!encryptedContent ? 'contenu ' : '') +
                        (!iv ? 'iv ' : '') +
                        (!key ? 'clé' : '')
                    );
                }

                const base64UrlToBase64 = (str) => {
                    if (!str) {
                        console.error('base64UrlToBase64: chaîne invalide:', str);
                        throw new Error('Chaîne base64url invalide');
                    }
                    return str.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');
                };

                const addBase64Padding = (str) => {
                    if (!str) {
                        console.error('addBase64Padding: chaîne invalide:', str);
                        throw new Error('Chaîne base64 invalide');
                    }
                    const pad = str.length % 4;
                    if (pad) {
                        return str + '='.repeat(4 - pad);
                    }
                    return str;
                };

                const standardKey = addBase64Padding(base64UrlToBase64(key));
                const standardIv = addBase64Padding(base64UrlToBase64(iv));
                const standardContent = addBase64Padding(base64UrlToBase64(encryptedContent));

                const keyBuffer = new Uint8Array(atob(standardKey).split('').map(c => c.charCodeAt(0)));
                const ivBuffer = new Uint8Array(atob(standardIv).split('').map(c => c.charCodeAt(0)));
                const encryptedBuffer = new Uint8Array(atob(standardContent).split('').map(c => c.charCodeAt(0)));

                const importedKey = await window.crypto.subtle.importKey(
                    "raw",
                    keyBuffer,
                    { name: "AES-GCM" },
                    false,
                    ["decrypt"]
                );

                const decryptedBuffer = await window.crypto.subtle.decrypt(
                    {
                        name: "AES-GCM",
                        iv: ivBuffer
                    },
                    importedKey,
                    encryptedBuffer
                );

                return new TextDecoder().decode(decryptedBuffer);
            } catch (error) {
                console.error('Erreur détaillée:', error);
                throw new Error(`Erreur de déchiffrement: ${error.message}`);
            }
        }

        async function loadPaste(success = false) {
            try {
                console.log('Chargement du paste:', { pasteId, key: key ? 'présent' : 'manquant' });
                
                const response = await fetch(`/api/paste/${pasteId}${success ? '?success=true' : ''}`);
                if (!response.ok) {
                    throw new Error('Paste non trouvé');
                }
                
                const data = await response.json();
                console.log('Données du serveur reçues:', {
                    hasContent: !!data.content,
                    hasIv: !!data.iv,
                    randomArt: !!data.randomArt,
                    visitors: data.visitors?.length
                });
                
                if (!key) {
                    throw new Error('Clé de déchiffrement manquante');
                }

                try {
                    const decryptedContent = await decryptContent(data.content, data.iv, key);
                    document.getElementById('content').textContent = decryptedContent;
                    
                    if (!success) {
                        await loadPaste(true);
                    }
                } catch (decryptError) {
                    showError(decryptError.message);
                    return;
                }

                document.getElementById('randomArt').textContent = data.randomArt;
                
                const infoItems = [];
                if (data.remainingViews !== undefined) {
                    infoItems.push(`Vues restantes <span class="badge">${data.remainingViews}</span>`);
                }
                if (data.expiresAt) {
                    const expireDate = new Date(data.expiresAt);
                    const timeLeft = expireDate - new Date();
                    const hoursLeft = Math.ceil(timeLeft / (1000 * 60 * 60));
                    
                    if (hoursLeft < 24) {
                        infoItems.push(`Expire dans <span class="badge">${hoursLeft}h</span>`);
                    } else {
                        infoItems.push(`Expire le <span class="badge">${expireDate.toLocaleDateString()}</span>`);
                    }
                }
                document.getElementById('info').innerHTML = infoItems.join('<br>');

                const visitorsHtml = data.visitors.map(v => 
                    `<div class="visitor-item">${v.ip} - ${new Date(v.timestamp).toLocaleString()}</div>`
                ).join('');
                document.getElementById('visitors').innerHTML = visitorsHtml || 'Aucun visiteur';

                // Afficher le contenu
                document.getElementById('content-wrapper').classList.remove('hidden');
                document.getElementById('error').classList.add('hidden');

            } catch (error) {
                showError(error.message);
            }
        }

        function showError(message) {
            const errorElement = document.getElementById('error');
            const contentWrapper = document.getElementById('content-wrapper');
            
            errorElement.textContent = message;
            errorElement.classList.remove('hidden');
            contentWrapper.classList.add('hidden');
        }

        loadPaste();
    </script>
</body>
</html> 