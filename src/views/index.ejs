<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Q13</title>
    <link rel="icon" type="image/png" href="/images/logo.png">
    <style>
        :root {
            --bg-color: #0a0a0a;
            --nav-bg: #000000;
            --content-bg: #151515;
            --input-bg: #1a1a1a;
            --text-color: #e0e0e0;
            --text-muted: #888888;
            --border-color: #2a2a2a;
            --accent-color: #4a9eff;
            --error-bg: #2d1215;
            --error-border: #4d1f24;
            --error-text: #ff4a4a;
            --success-color: #00c853;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .navbar {
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 12px 16px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .navbar-brand {
            font-size: 20px;
            font-weight: 600;
            color: var(--text-color);
            text-decoration: none;
            letter-spacing: -0.5px;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .navbar-logo {
            height: 24px;
            width: auto;
            object-fit: contain;
        }

        .navbar-button {
            padding: 8px 16px;
            background-color: #fff;
            color: #000;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            text-decoration: none;
            transition: all 0.2s ease;
        }

        .navbar-button:hover {
            background-color: rgba(255, 255, 255, 0.9);
            transform: translateY(-1px);
        }

        .navbar-button:active {
            transform: translateY(0);
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            width: 100%;
            box-sizing: border-box;
            flex: 1;
        }

        .content-container {
            background-color: var(--content-bg);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            border: 1px solid var(--border-color);
        }

        textarea {
            width: 100%;
            min-height: 300px;
            padding: 24px;
            border: none;
            resize: vertical;
            font-family: "Menlo", "Monaco", "Courier New", monospace;
            font-size: 14px;
            line-height: 1.6;
            box-sizing: border-box;
            background-color: var(--input-bg);
            color: var(--text-color);
            transition: background-color 0.2s ease;
        }

        textarea:focus {
            outline: none;
            background-color: var(--content-bg);
        }

        textarea::placeholder {
            color: var(--text-muted);
        }

        .options {
            padding: 24px 32px;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border-radius: 12px;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 32px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .option {
            display: flex;
            flex-direction: column;
            gap: 8px;
            padding-right: 16px;
        }

        .option-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 16px;
        }

        .option-left {
            flex: 1;
        }

        .option-group {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .option-label {
            font-size: 18px;
            font-weight: 500;
            color: var(--text-color);
            margin-bottom: 4px;
        }

        .help-text {
            font-size: 14px;
            color: var(--text-muted);
            opacity: 0.7;
            margin-top: 4px;
        }

        .option-checkbox {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 4px;
        }

        .option-checkbox label {
            font-size: 14px;
            color: var(--text-muted);
            cursor: pointer;
        }

        input[type="number"] {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            font-size: 16px;
            background-color: rgba(0, 0, 0, 0.3);
            color: var(--text-color);
            transition: all 0.2s ease;
        }

        input[type="checkbox"] {
            appearance: none;
            width: 18px;
            height: 18px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            margin: 0;
            cursor: pointer;
            position: relative;
            background-color: rgba(0, 0, 0, 0.3);
            transition: all 0.2s ease;
        }

        input[type="checkbox"]:checked {
            background-color: #fff;
            border-color: #fff;
        }

        input[type="checkbox"]:checked::after {
            content: "âœ“";
            position: absolute;
            color: #000;
            font-size: 14px;
            left: 3px;
            top: -1px;
        }

        input[type="checkbox"]:hover:not(:checked) {
            border-color: rgba(255, 255, 255, 0.4);
            background-color: rgba(255, 255, 255, 0.05);
        }

        .button-container {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        button {
            padding: 10px 24px;
            background-color: #fff;
            color: #000;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 15px;
            font-weight: 500;
            transition: all 0.2s ease;
            min-width: 160px;
        }

        button:hover:not(:disabled) {
            background-color: rgba(255, 255, 255, 0.9);
            transform: translateY(-1px);
        }

        button:active:not(:disabled) {
            transform: translateY(0);
        }

        button:disabled {
            background-color: rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.3);
            cursor: not-allowed;
        }

        #progress {
            display: none;
            margin-right: 10px;
            font-size: 14px;
            color: var(--text-muted);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% {
                opacity: 1;
            }

            50% {
                opacity: 0.6;
            }

            100% {
                opacity: 1;
            }
        }

        @media (max-width: 800px) {
            .options {
                grid-template-columns: 1fr;
                gap: 24px;
            }

            button {
                width: 100%;
                margin-top: 8px;
            }
        }

        footer {
            background: var(--nav-bg);
            border-top: 1px solid var(--border-color);
            padding: 20px 0;
            margin-top: auto;
        }

        .footer-content {
            display: flex;
            justify-content: center;
            gap: 24px;
        }

        .footer-link {
            color: var(--text-muted);
            text-decoration: none;
            font-size: 14px;
            transition: color 0.2s;
        }

        .footer-link:hover {
            color: var(--text-color);
        }

        /* Message d'aide pour le formatage Markdown */
        .markdown-help {
            margin-top: 8px;
            padding: 12px;
            background-color: var(--input-bg);
            border-radius: 8px;
            font-size: 14px;
            color: var(--text-muted);
        }

        .markdown-help code {
            background-color: rgba(0, 0, 0, 0.3);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: "Menlo", "Monaco", "Courier New", monospace;
        }

        .markdown-help pre {
            margin: 8px 0;
            padding: 12px;
            background-color: rgba(0, 0, 0, 0.3);
            border-radius: 6px;
            overflow-x: auto;
        }

        /* Styles pour les blocs de code Markdown */
        pre {
            background-color: var(--input-bg);
            border-radius: 8px;
            padding: 16px;
            margin: 16px 0;
            overflow-x: auto;
            border: 1px solid var(--border-color);
            position: relative;
        }

        pre::before {
            content: attr(data-language);
            position: absolute;
            top: 0;
            right: 0;
            padding: 4px 8px;
            font-size: 12px;
            color: var(--text-muted);
            background-color: rgba(0, 0, 0, 0.3);
            border-bottom-left-radius: 8px;
        }

        code {
            font-family: "Menlo", "Monaco", "Courier New", monospace;
            font-size: 14px;
            line-height: 1.6;
            color: var(--text-color);
        }

        pre code {
            display: block;
            white-space: pre;
            tab-size: 4;
        }

        /* Style pour le code en ligne */
        p code,
        li code {
            background-color: var(--input-bg);
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.9em;
        }

        /* Styles pour les blocs de code avec coloration syntaxique */
        .hljs {
            background: transparent;
            padding: 0;
        }

        /* Styles pour les diffÃ©rents Ã©lÃ©ments Markdown */
        .markdown-content {
            padding: 24px;
        }

        .markdown-content h1,
        .markdown-content h2,
        .markdown-content h3,
        .markdown-content h4,
        .markdown-content h5,
        .markdown-content h6 {
            margin-top: 24px;
            margin-bottom: 16px;
            font-weight: 600;
            line-height: 1.25;
        }

        .markdown-content p {
            margin-bottom: 16px;
        }

        .markdown-content ul,
        .markdown-content ol {
            padding-left: 24px;
            margin-bottom: 16px;
        }

        .markdown-content blockquote {
            margin: 16px 0;
            padding: 0 16px;
            color: var(--text-muted);
            border-left: 4px solid var(--border-color);
        }

        .markdown-content table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 16px;
        }

        .markdown-content th,
        .markdown-content td {
            padding: 8px;
            border: 1px solid var(--border-color);
        }

        .markdown-content th {
            background-color: var(--input-bg);
        }

        .error-message {
            display: none;
            background-color: var(--error-bg);
            border: 1px solid var(--error-border);
            color: var(--error-text);
            padding: 12px 16px;
            border-radius: 8px;
            margin-top: 16px;
            font-size: 14px;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .error-message.visible {
            display: block;
        }

        /* Styles pour le gÃ©nÃ©rateur de secrets */
        .content-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .content-container {
            background-color: var(--content-bg);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            border: 1px solid var(--border-color);
        }
    </style>
</head>

<body>
    <div class="container">
        <nav class="navbar">
            <a href="/" class="navbar-brand">
                <img src="/images/logo.png" alt="Q13 Logo" class="navbar-logo">
                Q13
            </a>
            <a href="/" class="navbar-button">Nouveau</a>
        </nav>
        <div class="content-container">
            <textarea id="content" placeholder="Collez votre texte ici pour le partager de maniÃ¨re sÃ©curisÃ©e..."></textarea>
            <div class="options">
                <div class="option">
                    <div class="option-label">Expire aprÃ¨s</div>
                    <div class="option-group">
                        <input type="number" id="expiresHours" name="expiresHours" value="1" min="1">
                        <div class="help-text">Nombre d'heures avant expiration</div>
                    </div>
                    <div class="option-checkbox">
                        <input type="checkbox" id="neverExpires" name="neverExpires">
                        <label for="neverExpires">N'expire jamais</label>
                    </div>
                </div>
                <div class="option">
                    <div class="option-label">Limite de vues</div>
                    <div class="option-group">
                        <input type="number" id="viewsCount" name="viewsCount" value="3" min="1">
                        <div class="help-text">Nombre maximum de fois que ce paste peut Ãªtre lu</div>
                    </div>
                    <div class="option-checkbox">
                        <input type="checkbox" id="unlimitedViews" name="unlimitedViews">
                        <label for="unlimitedViews">Vues illimitÃ©es</label>
                    </div>
                </div>
                <div class="option">
                    <div class="option-label">Formatage</div>
                    <div class="option-checkbox">
                        <input type="checkbox" id="enableMarkdown" name="enableMarkdown">
                        <label for="enableMarkdown">Activer le support Markdown</label>
                    </div>
                    <div class="help-text">Permet d'utiliser la syntaxe Markdown pour formater le texte</div>
                </div>
                <div class="option">
                    <div class="button-container">
                        <span id="progress"></span>
                        <button id="submitBtn" type="button">CrÃ©er le paste</button>
                    </div>
                    <div id="errorMessage" class="error-message"></div>
                </div>
            </div>
        </div>
    </div>

    <footer>
        <div class="container">
            <div class="footer-content">
                <a href="/about" class="footer-link">Ã€ propos</a>
                <a href="/legal" class="footer-link">Mentions lÃ©gales</a>
                <a href="/privacy" class="footer-link">Politique de confidentialitÃ©</a>
            </div>
        </div>
    </footer>

    <script src="/js/kyber.js"></script>
    <script src="/js/meteor-effect.js"></script>
    <script nonce="<%= nonce %>">
        // Code existant pour le paste
        let publicKey, secretKey;
        let isEncrypting = false;

        function showError(message) {
            const errorElement = document.getElementById('errorMessage');
            errorElement.textContent = message;
            errorElement.classList.add('visible');
            setTimeout(() => {
                errorElement.classList.remove('visible');
            }, 5000); // Le message disparaÃ®t aprÃ¨s 5 secondes
        }

        async function generateKeys() {
            try {
                const keys = await window.KeyGen768();
                [publicKey, secretKey] = keys;
                return true;
            } catch (error) {
                console.error('Erreur lors de la gÃ©nÃ©ration des clÃ©s:', error);
                return false;
            }
        }

        async function encryptContent(content) {
            if (!publicKey) {
                const success = await generateKeys();
                if (!success) return null;
            }

            try {
                const encrypted = await window.Encrypt768(content, publicKey);
                return {
                    ciphertext: encrypted.ciphertext,
                    iv: encrypted.iv,
                    kyberCiphertext: encrypted.kyberCiphertext,
                    secretKey: secretKey
                };
            } catch (error) {
                console.error('Erreur lors du chiffrement:', error);
                return null;
            }
        }

        document.getElementById('submitBtn').addEventListener('click', async function (e) {
            e.preventDefault();
            if (isEncrypting) return;

            const content = document.getElementById('content').value;
            if (!content.trim()) {
                showError('Veuillez entrer du contenu');
                return;
            }

            // VÃ©rification de la taille du contenu (2 Mo max)
            const maxSize = 2 * 1024 * 1024; // 2 Mo en octets
            const contentSize = new Blob([content]).size;
            if (contentSize > maxSize) {
                const sizeMB = (contentSize / (1024 * 1024)).toFixed(2);
                showError(`Le contenu est trop volumineux (${sizeMB} Mo). La taille maximale autorisÃ©e est de 2 Mo.`);
                return;
            }

            isEncrypting = true;
            const button = this;
            button.disabled = true;
            button.textContent = 'Chiffrement en cours...';

            const result = await encryptContent(content);
            if (result) {
                const data = {
                    content: result.ciphertext,
                    iv: result.iv,
                    kyberCiphertext: result.kyberCiphertext,
                    enableMarkdown: document.getElementById('enableMarkdown').checked
                };

                if (!document.getElementById('neverExpires').checked) {
                    const hours = document.getElementById('expiresHours').value;
                    data.expiresIn = hours * 3600; // Convertir en secondes
                }

                if (!document.getElementById('unlimitedViews').checked) {
                    const views = document.getElementById('viewsCount').value;
                    data.maxViews = views;
                }

                try {
                    const response = await fetch('/api/paste', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'CSRF-Token': '<%= csrfToken %>'
                        },
                        body: JSON.stringify(data)
                    });

                    if (!response.ok) {
                        if (response.status === 413) {
                            showError('Le contenu est trop volumineux pour le serveur. Veuillez rÃ©duire la taille du texte.');
                        } else {
                            const errorData = await response.text();
                            showError(`Erreur lors de l'envoi : ${errorData || response.statusText}`);
                        }
                        return;
                    }

                    const responseData = await response.json();
                    if (responseData.id) {
                        const secretKeyBase64 = btoa(String.fromCharCode.apply(null, new Uint8Array(result.secretKey)));
                        window.location.href = `/paste/${responseData.id}#${secretKeyBase64}`;
                    } else {
                        showError('Erreur inattendue lors de la crÃ©ation du paste');
                    }
                } catch (error) {
                    console.error('Erreur lors de l\'envoi:', error);
                    showError('Erreur lors de l\'envoi du paste. Veuillez rÃ©essayer.');
                }

                isEncrypting = false;
                button.disabled = false;
                button.textContent = 'CrÃ©er le paste';
            }
        });
    </script>
</body>

</html>